import os
import sys
import argparse
from io import StringIO


def get_potcar(input_poscar,
               pp_dir=os.environ["HOME"] + "/POT_GGA_PAW_PBE/"):
    """Concatenate POTCAR of given atom lables list.
    PP directory given as pp_dir option. Default is ~/phd/software/VASP5_psps/POT_GGA_PAW_PBE/
    Potcar obj is stored as StringIO and string is returned."""

    atm_labels = open(input_poscar, "r").readlines()[5].split()
    print(atm_labels)
    print(pp_dir)

    if not len(atm_labels):
        raise ValueError("No atoms given! len(atm_lables=0")
    # Define string stream to store parts of the POTCAR object
    potcar = StringIO('')
    # Loop over atom labels given
    for a in atm_labels:
        # For each atom read the POTCAR file from the potcar folder
        with open(pp_dir + "/" + a + "/POTCAR", 'r') as in_stream:
            # Concatenate them in the string stream
            potcar.write(in_stream.read())
    # Return a big string with the potcar file.
    return potcar.getvalue()


def get_simple_incar(input_poscar, magmom=True, u=True):
    line = open(input_poscar, "r").readlines()[6]
    l_ = [str(int(s)) + "*1.0 " for s in line.split() if s.isdigit()]
    line_mag = " ".join(l_) + "\n"

    s = "SYSTEM = BLANK INCAR GENERATED VIA vasp_gen_wrap.py\n" \
        "ISTART = 0 # new run \n" \
        "ICHARG = 2 # charge: atom \n" \
        "\n" \
        "# electronic optimization stuff\n" \
        "ENCUT = 500.00eV\n" \
        "ALGO = Normal\n" \
        "NELM = 60\n" \
        "EDIFF = 5E-06\n" \
        "SIGMA = 0.05; ISMEAR = 0\n" \
        "\n" \
        "# ionic relaxation\n" \
        "EDIFFG = -1E-02\n" \
        "NSW = -1 # no ionic steps\n" \
        "IBRION = 1\n" \
        "\n" \
        "# atom dependant stuff\n"

    if u:
        s = s + "LDAU = .FALSE.\n" \
                "LDAUTYPE = 2\n" \
                "LDAUL = {}\n".format("-1 " * len(l_)) + "LDAUU = {}\n".format("0.0 " * len(l_)) + \
            "LDAUJ = {}\n".format("0.0 " * len(l_)) + "LDAUPRINT = 2\n" + "LMAXMIX = 4\n"

    if magmom:
        s = s + "ISPIN = 1 # no spin-polarized calcs \n" \
                "MAGMOM = {}".format(" ".join([str(int(s)) + "*1.0 " for s in line.split() if s.isdigit()]) + "\n")
    return s


def incar_add_perfopt(cpn=40):
    add = "\n# performance optimisation\n" \
          "NCORE = {}\n".format(cpn) + "NSIM = 4\n" + "LPLANE = .TRUE.\n" + "LSCALU = .FALSE.\n"
    return add


def gen_gamma_kpoint():
    t = "Automatic mesh # Generated by make_vasp \n" \
        "0 \n" \
        "Gamma\n" \
        "1 1 1\n" \
        "0 0 0\n"
    return t
